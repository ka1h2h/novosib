"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssertType = void 0;
/**
 * DESIGN:
 *
 * It's unusual to create capitalized function names; however, this was done
 * to aid readability.
 *
 * See the unit test at ./src/test/index.test.ts
 *
 * Here are the considerations for the design choices:
 *
 * - Capitalize namespace so it looks like generics which are capitalize.
 *   Visually organizes `AssertType` as dealing with types.
 * - Used a namespace with separate methods
 *   - To allow importing a single object from the package `AssertType`
 *     instead of multiple.
 *   - Improve readability by having the function name like `Equal` appear in
 *     a different color in VSCode
 * - Added inverse functions like `Equal` and `NotEqual` even though we could
 *   have changed the argument to be `true` or `false` to have the same effect
 *   to reduce change of a mistake. The argument therefore should **always**
 *   be true.
 * - Included only `Equal` and `NotEqual` and not tests like
 *   `AssertType.Number` because they seemed like they could be edited easier
 *   by using `AssertType.Equal`. For example, let's say we wanted to do
 *   `AssertType.Number` but instead later realized we wanted to constrain to
 *   3 specific numbers like 1, 2, and 3. We would have to switch the method
 *   call to `AssertType.Equal` if we had an `AssertType.Number`. Also opens
 *   the floodgate to possible function bloat when they aren't necessary.
 */
var AssertType;
(function (AssertType) {
    function Equal(value) { }
    AssertType.Equal = Equal;
    function NotEqual(value) { }
    AssertType.NotEqual = NotEqual;
    function Extends(value) { }
    AssertType.Extends = Extends;
    function NotExtends(value) { }
    AssertType.NotExtends = NotExtends;
})(AssertType = exports.AssertType || (exports.AssertType = {}));
