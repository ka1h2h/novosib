"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateResource = exports.generateImageResource = exports.generateGenericResource = void 0;
const nanoid_1 = require("nanoid");
const types_1 = require("../types");
const utils_1 = require("../utils");
/**
 * Generates a custom nanoid with only alphanumeric characters
 */
const customId = (0, nanoid_1.customAlphabet)("0123456789abcdefghijklmnopqrstuvwxyz", 21);
function getFileExt(path) {
    const fileExt = path.split(".").pop();
    if (fileExt === undefined) {
        throw new Error(`fileExt cannot be undefined`);
    }
    return fileExt;
}
/**
 * Generates an S3 key and URL for an generic uploaded file (i.e. a file that
 * is not an image)
 *
 * The subpath should not include the root `f` dir.
 */
function generateGenericResource({ origin, // must not end with `/`
subpath, fileInfo, }) {
    if (origin.endsWith("/")) {
        throw new Error(`origin must not end with a /`);
    }
    const fileExt = getFileExt(fileInfo.filename);
    const filename = `${customId()}.${fileExt}`;
    const originalKey = `${subpath}/${filename}`;
    return {
        type: "generic",
        key: `${types_1.FILE_DIR}/${subpath}/${filename}`,
        url: `${origin}/${types_1.FILE_DIR}/${originalKey}`,
    };
}
exports.generateGenericResource = generateGenericResource;
/**
 * Generate an S3 key and URL for an uploade image.
 *
 * The subpath should not include the root `f` dir.
 */
function generateImageResource({ origin, subpath, fileInfo, }) {
    if (origin.endsWith("/")) {
        throw new Error(`origin must not end with a /`);
    }
    const fileExt = getFileExt(fileInfo.filename);
    const contentType = (0, utils_1.getImageContentType)(fileExt);
    if (contentType == null) {
        throw new Error(`The fileExt ${fileExt} is not a handled image extension`);
    }
    const originalKey = `${subpath}/${customId()}--${fileInfo.width}x${fileInfo.height}.${fileExt}`;
    return {
        type: "image",
        key: `${types_1.FILE_DIR}/${originalKey}`,
        url: `${origin}/${types_1.FILE_DIR}/${originalKey}`,
        width: fileInfo.width,
        height: fileInfo.height,
    };
}
exports.generateImageResource = generateImageResource;
function generateResource({ origin, subpath, fileInfo, }) {
    const fileExt = fileInfo.filename.split(".").pop();
    if (typeof fileExt !== "string") {
        throw new Error(`Expected fileext to be a string`);
    }
    return fileInfo.type === "generic"
        ? generateGenericResource({ origin, subpath, fileInfo })
        : generateImageResource({
            origin,
            subpath,
            fileInfo,
        });
}
exports.generateResource = generateResource;
