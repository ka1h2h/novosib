"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMockEventFromURL = exports.getMockRequestFromURL = exports.getSizeFromSearchParams = exports.extractKeyFromURI = exports.getSortedQueryString = exports.getImageContentType = exports.extractFilename = exports.extractFileExt = void 0;
const types_1 = require("../types");
/**
 * Takes a url, key, path or file name and returns the file extension.
 */
function extractFileExt(uri) {
    return uri.split("?").shift().split(".").pop();
}
exports.extractFileExt = extractFileExt;
/**
 * Takes a url, key or path and returns the filename.
 */
function extractFilename(uri) {
    return uri.split("?").shift().split("/").pop();
}
exports.extractFilename = extractFilename;
/**
 * Takes a URI (can be a URL, filename or just an extension) and returns the
 * content-type if this is an image. If it's not an image, returns undefined.
 */
function getImageContentType(uri) {
    const fileext = extractFileExt(uri);
    return types_1.CONTENT_TYPE_LOOKUP.get(fileext);
}
exports.getImageContentType = getImageContentType;
/**
 * Takes a URLSearchParams and returns a querystring that will always be
 * returned in the same order regardless of the order of the inputs of the
 * search params.
 *
 * This helps make the querystring consistent regardless of the way the
 * URLSearchParams were constructed.
 */
function getSortedQueryString(params) {
    const nextParams = new URLSearchParams(params);
    /**
     * Sorts params in place
     */
    nextParams.sort();
    return nextParams.toString();
}
exports.getSortedQueryString = getSortedQueryString;
/**
 * Takes a CloudFront style `uri` (e.g. in the CloudFront Request) and returns
 * the S3 key.
 *
 * The `uri` component will potentially have encoded characters like `?` and
 * `=` that have to be decoded.
 */
function extractKeyFromURI(uri) {
    if (!uri.startsWith("/")) {
        throw new Error(`Expected uri to start with "/" but is ${JSON.stringify(uri)}`);
    }
    return decodeURIComponent(uri).slice(1);
}
exports.extractKeyFromURI = extractKeyFromURI;
function getSizeFromSearchParams(params) {
    const size = params.get("size");
    if (size == null)
        return null;
    /**
     * If size param is not valid, return unhandled
     */
    const [widthText, heightText] = size.split("x");
    const width = parseInt(widthText);
    const height = parseInt(heightText);
    if (width <= 0 || height <= 0 || isNaN(width) || isNaN(height))
        return null;
    return { width, height };
}
exports.getSizeFromSearchParams = getSizeFromSearchParams;
/**
 * Takes a URL and returns the `uri` and `querystring` as it would appear in
 * a CloudFront Request.
 *
 * Useful for testing.
 */
function getMockRequestFromURL(urlString) {
    const url = new URL(urlString);
    return {
        uri: url.pathname,
        querystring: url.searchParams.toString(),
    };
}
exports.getMockRequestFromURL = getMockRequestFromURL;
function getMockEventFromURL(urlString) {
    const mockRequest = getMockRequestFromURL(urlString);
    return { Records: [{ cf: { request: mockRequest } }] };
}
exports.getMockEventFromURL = getMockEventFromURL;
