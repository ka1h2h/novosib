"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.remapCloudFrontRequest = exports.extractRequestFromEvent = void 0;
const types_1 = require("../types");
const utils_1 = require("../utils");
/**
 * Takes a CloudFront Event and extracts the Request portion of it
 */
function extractRequestFromEvent(e) {
    return e.Records[0].cf.request;
}
exports.extractRequestFromEvent = extractRequestFromEvent;
/**
 * Takes a Request event which may include a `querystring` and merges the
 * `querystring` into the `uri` be escaping it and additing it to the end.
 * The `querystring` is then set to an empty string before being returned.
 *
 * NOTE: The original `CFRequest` object is not modified. If a change is made,
 * we create a shallow copy first. If there is no change, then we return the
 * original object. Kind of like `immutable`.
 */
function remapCloudFrontRequest(request) {
    if (!request.uri.startsWith("/")) {
        throw new Error(`Expected request.uri to start with a "/" but is ${JSON.stringify(request.uri)}`);
    }
    /**
     * If `uri` is outside the `f` directory or `querystring` is "", don't remap.
     */
    if (!request.uri.startsWith(`/${types_1.FILE_DIR}/`) || request.querystring === "") {
        return request;
    }
    /**
     * Map querystring requests to the QUERY_DIR. We keep the QUERY_DIR
     * separate so that we can discard all its contents if we wish as they
     * will be automatically generated anyways.
     */
    const nextUri = request.uri.replace(`/${types_1.FILE_DIR}/`, `/${types_1.QUERY_DIR}/`);
    /**
     * Convert to escaped query string.
     */
    const querystring = (0, utils_1.getSortedQueryString)(new URLSearchParams(request.querystring));
    const nextRequest = {
        ...request,
        uri: `${nextUri}${encodeURIComponent(`?${querystring}`)}`,
        querystring: ``,
    };
    return nextRequest;
}
exports.remapCloudFrontRequest = remapCloudFrontRequest;
