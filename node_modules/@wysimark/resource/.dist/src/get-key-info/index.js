"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getKeyInfo = void 0;
const types_1 = require("../types");
const get_filename_info_1 = require("../get-filename-info");
const __1 = require("..");
/**
 * Takes an S3 key and returns information about it.
 */
function getKeyInfo(key) {
    const [root] = key.split("/");
    switch (root) {
        case types_1.FILE_DIR:
            return getFileKeyInfo(key);
        case types_1.QUERY_DIR:
            return getQueryKeyInfo(key);
        default:
            return { type: "unrecognized", key };
    }
}
exports.getKeyInfo = getKeyInfo;
/**
 * Parse a file key that is in `FILE_DIR` directory.
 */
function getFileKeyInfo(key) {
    const parts = key.split("/");
    const filename = parts[parts.length - 1];
    const info = (0, get_filename_info_1.getFilenameInfo)(filename);
    return { key, ...info };
}
function getImageFileKeyInfo(key) {
    const info = getFileKeyInfo(key);
    if (info.type !== "image") {
        throw new Error(`Expected key to match an original image`);
    }
    return info;
}
/**
 * Parse a file key in the `q` directory.
 *
 * NOTE: The CDN will have had to remap to the `q` directory if there is a query.
 *
 * NOTE: Assumes the key is in the `q` directory.
 */
function getQueryKeyInfo(key) {
    const unhandledQuery = {
        type: "unrecognized-query",
        key,
    };
    const [path, query] = key.split("?");
    /**
     * If there is no query part, return unhandled
     */
    if (query === undefined)
        return unhandledQuery;
    const params = new URLSearchParams(query);
    const size = (0, __1.getSizeFromSearchParams)(params);
    if (size == null)
        return unhandledQuery;
    // /**
    //  * If there is no size param, return unhandled
    //  */
    // const params = new URLSearchParams(query)
    // const size = params.get("size")
    // if (size == null) return unhandledQuery
    // /**
    //  * If size param is not valid, return unhandled
    //  */
    // const [widthText, heightText] = size.split("x")
    // const width = parseInt(widthText)
    // const height = parseInt(heightText)
    // if (width <= 0 || height <= 0 || isNaN(width) || isNaN(height))
    //   return unhandledQuery
    /**
     * Extract originalImageInfo
     */
    const originalImageInfo = getImageFileKeyInfo(`${types_1.FILE_DIR}/${path.split("/").slice(1).join("/")}`);
    return {
        type: "image-query",
        key,
        contentType: originalImageInfo.contentType,
        width: size.width,
        height: size.height,
        originalImageInfo,
    };
}
